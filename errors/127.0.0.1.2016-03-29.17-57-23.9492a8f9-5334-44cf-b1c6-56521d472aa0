(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'str' object has no attribute '_db'"
p3
sS'layer'
p4
S'/home/thealchemist/python/web2py/applications/chefitter/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Hello World")\n    return dict(message=T(\'Welcome to web2py!\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n@auth.requires_login()\ndef home():\n\tif len(request.args): page=int(request.args[0])\n\telse: page=0\n\titems_per_page=15\n\tlimitby=(page*items_per_page,(page+1)*items_per_page+1)\n\trows=db().select(db.recipe.ALL,limitby=limitby)\n\treturn dict(rows=rows,page=page,items_per_page=items_per_page)\n\n#@auth.requires_membership(\'manager\')\n#def manager():\n#grid=SQLFORM.smartgrid(db.recipe, linked_tables)\n\ndef home_likes():\n\tif len(request.args): page=int(request.args[0])\n\telse: page=0\n\titems_per_page=15\n\tlimitby=(page*items_per_page,(page+1)*items_per_page+1)\n\trows=db().select(db.recipe.ALL,limitby=limitby)\n\treturn dict(rows=rows,page=page,items_per_page=items_per_page)\n\ndef upload_recipe():\n\tdb.recipe.likes.readable=False\n\tdb.recipe.likes.writable=False\n\tdb.recipe.name.writable=False\n\tform=SQLFORM(db.recipe)\n\tif form.process().accepted:\n\t\tresponse.flash="done!"\n\t\tvar=form.vars.id\n\t\tr=db(db.recipe.id==var).select().first()\n\t\tr.update_record(likes=0)\n\telif form.process().errors:\n\t\tresponse.flash="try again."\n\treturn dict(form=form)\n\ndef update_likes():\n\ti=request.args[0]\n\tq=db.recipe.id==i\n\tans=db(q).select()\n\tfor j in ans:\n\t\tm=j\n\t\tfinal = j["likes"] + 1\n\tm.update_record(likes=final)\n\tredirect(URL(\'default\', \'home_likes\'))\n\ndef my_recipe():\n\tq=db.recipe.userid==auth.user_id\n\tvar=db(q).select()\n\treturn dict(myr=var)\n\ndef edit():\n\ta=request.args[0]\n\tq=db.recipe.id==a\n\tm=db(q).select()\n\tfor i in m:\n\t\tj=i\n\tredirect(URL(\'default\', \'editt\', args=q))\n\t\ndef editt():\n\tq=request.args[0]\n\tform=SQLFORM.grid(q)\n\treturn dict(form=form)\n\ndef details():\n\ta=request.args[0]\n\tq=db.recipe.id==a\n\tm=db(q).select()\n\tfor i in m:\n\t\tans=i\n\tdb.comments.kisne.readable=False\n\tdb.comments.kisne.writable=False\n\tdb.comments.kisko.default=ans["id"]\n\tdb.comments.kisko.readable=False\n\tdb.comments.kisko.writable=False\n\tform=SQLFORM(db.comments)\n\tif form.process().accepted:\n\t \tresponse.flash="You commented on this recipe."\n\tquer=db.comments.kisko==ans["id"]\n\tcom=db(quer).select()\n\treturn dict(ans=ans, form=form, com=com)\n\ndef download():\n\treturn response.download(request, db)\n\nresponse._vars=response._caller(editt)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/thealchemist/python/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/thealchemist/python/web2py/applications/chefitter/controllers/default.py", line 144, in <module>\n  File "/home/thealchemist/python/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/thealchemist/python/web2py/applications/chefitter/controllers/default.py", line 120, in editt\n    form=SQLFORM.grid(q)\n  File "/home/thealchemist/python/web2py/gluon/sqlhtml.py", line 2057, in grid\n    db = query._db\nAttributeError: \'str\' object has no attribute \'_db\'\n'
p11
s.